CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/..")
INCLUDE(funra)

PROJECT(3rd)

SET(R3RD_SOURCE_ROOT ${PROJECT_SOURCE_DIR})

SET(CMAKE_C_STANDARD 99)

SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Set debug librbased postfix" FORCE)
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "Set release librbase postfix" FORCE)

# 64位
IF (CMAKE_CL_64)
    MESSAGE(STATUS "Arch type is 64.")
    SET(ARCH_TYPE 64)
# 32
ELSE()
    MESSAGE(STATUS "Arch type is 32.")
    SET(ARCH_TYPE 32)
ENDIF()

#set flag and subfix
IF (CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET(PROJECT_FLAGS_COMMON "-fPIC -fexceptions -Wall -D__STDC_FORMAT_MACROS -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_FLAGS_COMMON} -g3 -ggdb -O0 -rdynamic -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_FLAGS_COMMON} -g0 -O2 -rdynamic -DNDEBUG")
ELSEIF (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    SET(PROJECT_FLAGS_COMMON "/GF /MP /EHsc /Gd /W3 -D_CRT_SECURE_NO_WARNINGS")
    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_FLAGS_COMMON} /MTd /Ob0 /Od /RTC1 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_FLAGS_COMMON} /MT /Ob2 /O2 -DNDEBUG")
    SET(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:"MSVCRT.lib;MSVCRTD.lib")
ENDIF ()
SET(CMAKE_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_DEBUG}" CACHE STRING "Set debug build flags" FORCE)
SET(CMAKE_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_RELEASE}" CACHE STRING "Set relese build flags" FORCE)
SET(CompilerFlags
    CMAKE_CXX_FLAGS
    CMAKE_CXX_FLAGS_DEBUG
    CMAKE_CXX_FLAGS_RELEASE
    CMAKE_C_FLAGS
    CMAKE_C_FLAGS_DEBUG
    CMAKE_C_FLAGS_RELEASE
    )
FOREACH(CompilerFlag ${CompilerFlags})
    STRING(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
ENDFOREACH()

IF (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    SET(PROJECT_DEFINES "-DWIN32 -DOS_WIN -D_CRT_SECURE_NO_WARNINGS")
    SET(DIR_PLATFORM Windows_${CMAKE_SYSTEM_PROCESSOR})
ELSEIF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    SET(PROJECT_DEFINES "-DOS_LINUX -D_OS_LINUX")
    SET(DIR_PLATFORM Linux_${CMAKE_SYSTEM_PROCESSOR})
    SET(PROJECT_LINK_OPTIONS
        #-ljemalloc 
        -lm -lstdc++ -pthread -ldl
        -static-libgcc
        -static-libstdc++
    )
ELSE()
    MESSAGE(FATAL_ERROR "This operating system is not supported: ${CMAKE_HOST_SYSTEM_NAME}")
    SET(DIR_PLATFORM ${CMAKE_HOST_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR})
ENDIF()

ADD_DEFINITIONS(${PROJECT_DEFINES})
ADD_LINK_OPTIONS(${PROJECT_LINK_OPTIONS})

SET(R3RD_LIB_ROOT ${PROJECT_SOURCE_DIR}/../../build/lib/${DIR_PLATFORM}/3rd)
SET(R3RD_BINARY_ROOT ${PROJECT_SOURCE_DIR}/../../build/bin/${DIR_PLATFORM})

# 指定可执行程序输出目录
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG    ${R3RD_BINARY_ROOT})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE  ${R3RD_BINARY_ROOT})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY          ${R3RD_BINARY_ROOT})

# 指定 库文件输出目录
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG    ${R3RD_LIB_ROOT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE  ${R3RD_LIB_ROOT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY          ${R3RD_LIB_ROOT})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY          ${R3RD_LIB_ROOT})

ADD_SUBDIRECTORY(libuv/1.42.0)
ADD_SUBDIRECTORY(lua/5.4.3)

SET(UNIT_TESTING OFF)
ADD_SUBDIRECTORY(cmocka)
UNSET(UNIT_TESTING)

ADD_SUBDIRECTORY(lua-protobuf)

#ADD_SUBDIRECTORY(gperftools/2.9.1)

IF (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
ADD_SUBDIRECTORY(win-iconv)
ENDIF()