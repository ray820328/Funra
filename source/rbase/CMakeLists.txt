CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/..")
INCLUDE(funra)

PROJECT(rbase)

SET(RBASE_SOURCE_ROOT ${PROJECT_SOURCE_DIR})

IF (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    SET(WIN32_LEAN_AND_MEAN)
ENDIF ()

IF (CMAKE_BUILD_TYPE MATCHES "Debug")
	MESSAGE(STATUS "Build as type of Debug")
	SET(RBUILD_TYPE_POSTFIX ${CMAKE_DEBUG_POSTFIX})
ELSEIF (CMAKE_BUILD_TYPE MATCHES "Release")
	MESSAGE(STATUS "Build as type of Release")
	SET(RBUILD_TYPE_POSTFIX ${CMAKE_RELEASE_POSTFIX})
ELSE()
	MESSAGE(STATUS "Build as type [${CMAKE_BUILD_TYPE}], set as Debug.")
	SET(RBUILD_TYPE_POSTFIX ${CMAKE_DEBUG_POSTFIX})
ENDIF ()

#set flag and subfix
IF (CMAKE_C_COMPILER_ID STREQUAL "GNU")
    SET(PROJECT_FLAGS_COMMON "-fPIC -fexceptions -Wall -D__STDC_FORMAT_MACROS -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_FLAGS_COMMON} -g3 -ggdb -O0 -rdynamic -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_FLAGS_COMMON} -g0 -O2 -rdynamic -DNDEBUG")
ELSEIF (CMAKE_C_COMPILER_ID STREQUAL "MSVC")
    SET(PROJECT_FLAGS_COMMON "/GF /MP /EHsc /Gd /W3 -D_CRT_SECURE_NO_WARNINGS")
    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_FLAGS_COMMON} /MTd /Ob0 /Od /RTC1 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_FLAGS_COMMON} /MT /Ob2 /O2 -DNDEBUG")
    SET(CMAKE_EXE_LINKER_FLAGS /NODEFAULTLIB:"MSVCRT.lib;MSVCRTD.lib")
ENDIF ()
SET(CMAKE_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_DEBUG}" CACHE STRING "Set debug build flags" FORCE)
SET(CMAKE_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_RELEASE}" CACHE STRING "Set relese build flags" FORCE)
SET(CompilerFlags
    CMAKE_CXX_FLAGS
    CMAKE_CXX_FLAGS_DEBUG
    CMAKE_CXX_FLAGS_RELEASE
    CMAKE_C_FLAGS
    CMAKE_C_FLAGS_DEBUG
    CMAKE_C_FLAGS_RELEASE
    )
FOREACH(CompilerFlag ${CompilerFlags})
    STRING(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
ENDFOREACH()

# 64位
IF (CMAKE_CL_64)
	MESSAGE(STATUS "Arch type is 64.")
	SET(ARCH_TYPE 64)
# 32
ELSE()
	MESSAGE(STATUS "Arch type is 32.")
	SET(ARCH_TYPE 32)
ENDIF()

IF (CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    SET(PROJECT_DEFINES "-DOS_LINUX -DLUA_USE_POSIX")
    SET(DIR_PLATFORM Linux_${CMAKE_SYSTEM_PROCESSOR})
ELSEIF (CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    SET(PROJECT_DEFINES "-DWIN32 -DOS_Windows")
    SET(DIR_PLATFORM Windows_${CMAKE_SYSTEM_PROCESSOR})
ELSE()
    SET(PROJECT_DEFINES)
    SET(DIR_PLATFORM ${CMAKE_HOST_SYSTEM_NAME}_${CMAKE_SYSTEM_PROCESSOR})
ENDIF ()
ADD_DEFINITIONS(${PROJECT_DEFINES})


SET(RBASE_LIB_ROOT ${PROJECT_SOURCE_DIR}/../../build/lib/${DIR_PLATFORM})
SET(RBASE_BINARY_ROOT ${PROJECT_SOURCE_DIR}/../../build/bin/${DIR_PLATFORM})

if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    LINK_DIRECTORIES(
        ${RBASE_LIB_ROOT}
    )
    
    SET(LINK_LIBS 
        legacy_stdio_definitions
        3rd/cmocka
        3rd/lua${RBUILD_TYPE_POSTFIX}
        3rd/uv${RBUILD_TYPE_POSTFIX}
        3rd/uv_a${RBUILD_TYPE_POSTFIX}
        rcommon${RBUILD_TYPE_POSTFIX}
        ripc${RBUILD_TYPE_POSTFIX}
    )
else()
    LINK_DIRECTORIES(
        /usr/local/lib
        ${RBASE_LIB_ROOT}
        ${RBASE_LIB_ROOT}/3rd
    )
    SET(LINK_LIBS 
        dl 
        m 
        pthread
        liblua${RBUILD_TYPE_POSTFIX}.a 
        libuv${RBUILD_TYPE_POSTFIX}.a 
        libuv_a${RBUILD_TYPE_POSTFIX}.a 
        librcommon${RBUILD_TYPE_POSTFIX}.a
        libripc${RBUILD_TYPE_POSTFIX}.a    
    )
    SET(PROJECT_LINK_OPTIONS
        #-ljemalloc 
        -luv
        -lstdc++
        -static-libgcc
        -static-libstdc++
    )
endif()

ADD_LINK_OPTIONS(${PROJECT_LINK_OPTIONS})

SET(CMAKE_INSTALL_PREFIX					${RBASE_BINARY_ROOT})

# 指定可执行程序输出目录
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG 	${RBASE_BINARY_ROOT})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE 	${RBASE_BINARY_ROOT})

# 指定 库文件输出目录
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG 	${RBASE_LIB_ROOT})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE 	${RBASE_LIB_ROOT})

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY          ${RBASE_LIB_ROOT})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY          ${RBASE_LIB_ROOT})

ADD_SUBDIRECTORY(common)
ADD_SUBDIRECTORY(ecs)
ADD_SUBDIRECTORY(ipc)
ADD_SUBDIRECTORY(rpc)