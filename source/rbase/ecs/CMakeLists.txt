CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

PROJECT(recs)

#SET(EXECUTABLE_OUTPUT_PATH ${RBASE_BINARY_ROOT}) 

INCLUDE_DIRECTORIES(
    include
)

SET(SRC_LIB
    src/rentity.c
    src/rcomponent.c
    src/rsystem.c
    src/recs.c
    src/recs_sys_script_lua.c
)

SET(SRC_BIN
    ${SRC_LIB}
    test/rtest.c
    test/rtest_recs.c
    test/rtest_rentity.c
)

ADD_LIBRARY(${PROJECT_NAME} STATIC ${SRC_LIB})
#ADD_LIBRARY(${PROJECT_NAME} SHARED ${SRC_LIB})

#SET(LIBRARY_OUTPUT_PATH ${RBASE_LIB_ROOT}) 

MESSAGE(STATUS "Platform: ${CMAKE_HOST_SYSTEM_NAME} - ${CMAKE_CURRENT_SOURCE_DIR}")
MESSAGE(STATUS "Link libs (${PROJECT_NAME}): ${LINK_LIBS}")
MESSAGE(STATUS "Link opts (${PROJECT_NAME}): ${PROJECT_LINK_OPTIONS}")

IF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    SET(LINK_TEST_LIBS ${LINK_LIBS} 3rd/cmockad)
ELSE()
    SET(LINK_TEST_LIBS ${LINK_LIBS} libcmockad.so)
ENDIF()

MESSAGE(STATUS "Platform: ${CMAKE_HOST_SYSTEM_NAME} - ${CMAKE_CURRENT_SOURCE_DIR}")

IF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    ADD_EXECUTABLE(${PROJECT_NAME}_test ${SRC_BIN})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_test ${LINK_TEST_LIBS})
ELSE()
    ADD_EXECUTABLE(${PROJECT_NAME}_test${RBUILD_TYPE_POSTFIX} ${SRC_BIN})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_test${RBUILD_TYPE_POSTFIX} ${LINK_TEST_LIBS})
ENDIF()

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/include
)

